// Generated by Dagger (https://dagger.dev).
package com.wf.weatherforcastexample;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.gson.Gson;
import com.wf.weatherforcastexample.core.base.view.BaseFragment_MembersInjector;
import com.wf.weatherforcastexample.core.utils.AppPreferences;
import com.wf.weatherforcastexample.core.utils.Extensions;
import com.wf.weatherforcastexample.db.CityDao;
import com.wf.weatherforcastexample.db.CityDatabase;
import com.wf.weatherforcastexample.db.ForecastCityDao;
import com.wf.weatherforcastexample.domain.api.ApiService;
import com.wf.weatherforcastexample.modules.AppPreferencesModule;
import com.wf.weatherforcastexample.modules.AppPreferencesModule_ProvidesSharedPreferencesEditorFactory;
import com.wf.weatherforcastexample.modules.AppPreferencesModule_ProvidesSharedPreferencesFactory;
import com.wf.weatherforcastexample.modules.AppPreferencesModule_ProvidesSharedPreferencesHelperFactory;
import com.wf.weatherforcastexample.modules.LocalModule;
import com.wf.weatherforcastexample.modules.LocalModule_CityDaoFactory;
import com.wf.weatherforcastexample.modules.LocalModule_ForecastCityDaoFactory;
import com.wf.weatherforcastexample.modules.LocalModule_ProvideDatabaseFactory;
import com.wf.weatherforcastexample.modules.NetworkModule;
import com.wf.weatherforcastexample.modules.NetworkModule_ProvideGsonFactory;
import com.wf.weatherforcastexample.modules.NetworkModule_ProvideHeadersInterceptorFactory;
import com.wf.weatherforcastexample.modules.NetworkModule_ProvideHomeServicesFactory;
import com.wf.weatherforcastexample.modules.NetworkModule_ProvideHttpLoggingInterceptorFactory;
import com.wf.weatherforcastexample.modules.NetworkModule_ProvideOkHttpClientFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvideLocationProviderClientFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvideLocationProviderFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvidesDetailsRepositoryFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvidesDetailsRepositoryImpFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvidesHomeRepositoryFactory;
import com.wf.weatherforcastexample.modules.RepositoryModule_ProvidesHomeRepositoryImpFactory;
import com.wf.weatherforcastexample.ui.details.repo.DetailsRepository;
import com.wf.weatherforcastexample.ui.details.repo.DetailsRepositoryImp;
import com.wf.weatherforcastexample.ui.details.view.CityDetailsFragment;
import com.wf.weatherforcastexample.ui.details.viewModel.DetailsViewModel;
import com.wf.weatherforcastexample.ui.details.viewModel.DetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wf.weatherforcastexample.ui.home.data.LocationProvider;
import com.wf.weatherforcastexample.ui.home.repo.HomeRepository;
import com.wf.weatherforcastexample.ui.home.repo.HomeRepositoryImp;
import com.wf.weatherforcastexample.ui.home.view.HomeFragment;
import com.wf.weatherforcastexample.ui.home.viewmodel.HomeViewModel;
import com.wf.weatherforcastexample.ui.home.viewmodel.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.wf.weatherforcastexample.ui.splash.view.SplashFragment;
import com.wf.weatherforcastexample.widget.WeatherWidget;
import com.wf.weatherforcastexample.widget.WeatherWidget_MembersInjector;
import com.wf.weatherforcastexample.widget.WidgetRepository;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBaseApp_HiltComponents_SingletonC extends BaseApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerBaseApp_HiltComponents_SingletonC singletonC = this;

  private Provider<CityDatabase> provideDatabaseProvider;

  private Provider<CityDao> cityDaoProvider;

  private Provider<SharedPreferences> providesSharedPreferencesProvider;

  private Provider<SharedPreferences.Editor> providesSharedPreferencesEditorProvider;

  private Provider<AppPreferences> providesSharedPreferencesHelperProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Interceptor> provideHeadersInterceptorProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ApiService> provideHomeServicesProvider;

  private Provider<ForecastCityDao> forecastCityDaoProvider;

  private DaggerBaseApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private CityDatabase cityDatabase() {
    return LocalModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private CityDao cityDao() {
    return LocalModule_CityDaoFactory.cityDao(provideDatabaseProvider.get());
  }

  private WidgetRepository widgetRepository() {
    return new WidgetRepository(cityDaoProvider.get());
  }

  private SharedPreferences sharedPreferences() {
    return AppPreferencesModule_ProvidesSharedPreferencesFactory.providesSharedPreferences(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SharedPreferences.Editor editor() {
    return AppPreferencesModule_ProvidesSharedPreferencesEditorFactory.providesSharedPreferencesEditor(providesSharedPreferencesProvider.get());
  }

  private AppPreferences appPreferences() {
    return AppPreferencesModule_ProvidesSharedPreferencesHelperFactory.providesSharedPreferencesHelper(providesSharedPreferencesProvider.get(), providesSharedPreferencesEditorProvider.get());
  }

  private Interceptor interceptor() {
    return NetworkModule_ProvideHeadersInterceptorFactory.provideHeadersInterceptor(providesSharedPreferencesHelperProvider.get(), ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private OkHttpClient okHttpClient() {
    return NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(provideHeadersInterceptorProvider.get(), provideHttpLoggingInterceptorProvider.get(), ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ApiService apiService() {
    return NetworkModule_ProvideHomeServicesFactory.provideHomeServices(provideGsonProvider.get(), provideOkHttpClientProvider.get());
  }

  private ForecastCityDao forecastCityDao() {
    return LocalModule_ForecastCityDaoFactory.forecastCityDao(provideDatabaseProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<CityDatabase>(singletonC, 1));
    this.cityDaoProvider = DoubleCheck.provider(new SwitchingProvider<CityDao>(singletonC, 0));
    this.providesSharedPreferencesProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonC, 3));
    this.providesSharedPreferencesEditorProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences.Editor>(singletonC, 4));
    this.providesSharedPreferencesHelperProvider = DoubleCheck.provider(new SwitchingProvider<AppPreferences>(singletonC, 2));
    this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonC, 6));
    this.provideHeadersInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<Interceptor>(singletonC, 8));
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 9));
    this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 7));
    this.provideHomeServicesProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonC, 5));
    this.forecastCityDaoProvider = DoubleCheck.provider(new SwitchingProvider<ForecastCityDao>(singletonC, 10));
  }

  @Override
  public void injectBaseApp(BaseApp baseApp) {
  }

  @Override
  public void injectWeatherWidget(WeatherWidget weatherWidget) {
    injectWeatherWidget2(weatherWidget);
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  private WeatherWidget injectWeatherWidget2(WeatherWidget instance) {
    WeatherWidget_MembersInjector.injectWidgetRepository(instance, widgetRepository());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appPreferencesModule(AppPreferencesModule appPreferencesModule) {
      Preconditions.checkNotNull(appPreferencesModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder localModule(LocalModule localModule) {
      Preconditions.checkNotNull(localModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public BaseApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerBaseApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements BaseApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public BaseApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements BaseApp_HiltComponents.ActivityC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements BaseApp_HiltComponents.FragmentC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements BaseApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements BaseApp_HiltComponents.ViewC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements BaseApp_HiltComponents.ViewModelC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements BaseApp_HiltComponents.ServiceC.Builder {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public BaseApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends BaseApp_HiltComponents.ViewWithFragmentC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends BaseApp_HiltComponents.FragmentC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    private Extensions extensions() {
      return new Extensions(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));
    }

    @Override
    public void injectCityDetailsFragment(CityDetailsFragment cityDetailsFragment) {
      injectCityDetailsFragment2(cityDetailsFragment);
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
      injectHomeFragment2(homeFragment);
    }

    @Override
    public void injectSplashFragment(SplashFragment splashFragment) {
      injectSplashFragment2(splashFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private CityDetailsFragment injectCityDetailsFragment2(CityDetailsFragment instance) {
      BaseFragment_MembersInjector.injectExtensions(instance, extensions());
      BaseFragment_MembersInjector.injectAppPreferences(instance, singletonC.providesSharedPreferencesHelperProvider.get());
      return instance;
    }

    private HomeFragment injectHomeFragment2(HomeFragment instance) {
      BaseFragment_MembersInjector.injectExtensions(instance, extensions());
      BaseFragment_MembersInjector.injectAppPreferences(instance, singletonC.providesSharedPreferencesHelperProvider.get());
      return instance;
    }

    private SplashFragment injectSplashFragment2(SplashFragment instance) {
      BaseFragment_MembersInjector.injectExtensions(instance, extensions());
      BaseFragment_MembersInjector.injectAppPreferences(instance, singletonC.providesSharedPreferencesHelperProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends BaseApp_HiltComponents.ViewC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends BaseApp_HiltComponents.ActivityC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivityActivity(MainActivityActivity mainActivityActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(2).add(DetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends BaseApp_HiltComponents.ViewModelC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<DetailsViewModel> detailsViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private ViewModelCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private DetailsRepositoryImp detailsRepositoryImp() {
      return RepositoryModule_ProvidesDetailsRepositoryImpFactory.providesDetailsRepositoryImp(singletonC.provideHomeServicesProvider.get(), singletonC.forecastCityDaoProvider.get());
    }

    private DetailsRepository detailsRepository() {
      return RepositoryModule_ProvidesDetailsRepositoryFactory.providesDetailsRepository(detailsRepositoryImp());
    }

    private DetailsViewModel detailsViewModel() {
      return new DetailsViewModel(detailsRepository());
    }

    private HomeRepositoryImp homeRepositoryImp() {
      return RepositoryModule_ProvidesHomeRepositoryImpFactory.providesHomeRepositoryImp(singletonC.provideHomeServicesProvider.get(), singletonC.cityDaoProvider.get());
    }

    private FusedLocationProviderClient fusedLocationProviderClient() {
      return RepositoryModule_ProvideLocationProviderClientFactory.provideLocationProviderClient(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));
    }

    private LocationProvider locationProvider() {
      return RepositoryModule_ProvideLocationProviderFactory.provideLocationProvider(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), fusedLocationProviderClient());
    }

    private HomeRepository homeRepository() {
      return RepositoryModule_ProvidesHomeRepositoryFactory.providesHomeRepository(homeRepositoryImp(), locationProvider());
    }

    private HomeViewModel homeViewModel() {
      return new HomeViewModel(homeRepository());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.detailsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("com.wf.weatherforcastexample.ui.details.viewModel.DetailsViewModel", (Provider) detailsViewModelProvider).put("com.wf.weatherforcastexample.ui.home.viewmodel.HomeViewModel", (Provider) homeViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.wf.weatherforcastexample.ui.details.viewModel.DetailsViewModel 
          return (T) viewModelCImpl.detailsViewModel();

          case 1: // com.wf.weatherforcastexample.ui.home.viewmodel.HomeViewModel 
          return (T) viewModelCImpl.homeViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends BaseApp_HiltComponents.ActivityRetainedC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends BaseApp_HiltComponents.ServiceC {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerBaseApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerBaseApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerBaseApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.wf.weatherforcastexample.db.CityDao 
        return (T) singletonC.cityDao();

        case 1: // com.wf.weatherforcastexample.db.CityDatabase 
        return (T) singletonC.cityDatabase();

        case 2: // com.wf.weatherforcastexample.core.utils.AppPreferences 
        return (T) singletonC.appPreferences();

        case 3: // android.content.SharedPreferences 
        return (T) singletonC.sharedPreferences();

        case 4: // android.content.SharedPreferences.Editor 
        return (T) singletonC.editor();

        case 5: // com.wf.weatherforcastexample.domain.api.ApiService 
        return (T) singletonC.apiService();

        case 6: // com.google.gson.Gson 
        return (T) NetworkModule_ProvideGsonFactory.provideGson();

        case 7: // okhttp3.OkHttpClient 
        return (T) singletonC.okHttpClient();

        case 8: // okhttp3.Interceptor 
        return (T) singletonC.interceptor();

        case 9: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) NetworkModule_ProvideHttpLoggingInterceptorFactory.provideHttpLoggingInterceptor();

        case 10: // com.wf.weatherforcastexample.db.ForecastCityDao 
        return (T) singletonC.forecastCityDao();

        default: throw new AssertionError(id);
      }
    }
  }
}
