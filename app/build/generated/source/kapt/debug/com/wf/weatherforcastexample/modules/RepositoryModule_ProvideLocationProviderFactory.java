// Generated by Dagger (https://dagger.dev).
package com.wf.weatherforcastexample.modules;

import android.app.Application;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.wf.weatherforcastexample.ui.home.data.LocationProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideLocationProviderFactory implements Factory<LocationProvider> {
  private final Provider<Application> contextProvider;

  private final Provider<FusedLocationProviderClient> clientProvider;

  public RepositoryModule_ProvideLocationProviderFactory(Provider<Application> contextProvider,
      Provider<FusedLocationProviderClient> clientProvider) {
    this.contextProvider = contextProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public LocationProvider get() {
    return provideLocationProvider(contextProvider.get(), clientProvider.get());
  }

  public static RepositoryModule_ProvideLocationProviderFactory create(
      Provider<Application> contextProvider, Provider<FusedLocationProviderClient> clientProvider) {
    return new RepositoryModule_ProvideLocationProviderFactory(contextProvider, clientProvider);
  }

  public static LocationProvider provideLocationProvider(Application context,
      FusedLocationProviderClient client) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideLocationProvider(context, client));
  }
}
