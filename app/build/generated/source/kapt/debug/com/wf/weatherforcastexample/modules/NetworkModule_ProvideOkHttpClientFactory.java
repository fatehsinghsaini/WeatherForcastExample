// Generated by Dagger (https://dagger.dev).
package com.wf.weatherforcastexample.modules;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<Interceptor> headersInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> loggingProvider;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvideOkHttpClientFactory(Provider<Interceptor> headersInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingProvider, Provider<Context> contextProvider) {
    this.headersInterceptorProvider = headersInterceptorProvider;
    this.loggingProvider = loggingProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(headersInterceptorProvider.get(), loggingProvider.get(), contextProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(
      Provider<Interceptor> headersInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingProvider, Provider<Context> contextProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(headersInterceptorProvider, loggingProvider, contextProvider);
  }

  public static OkHttpClient provideOkHttpClient(Interceptor headersInterceptor,
      HttpLoggingInterceptor logging, Context context) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttpClient(headersInterceptor, logging, context));
  }
}
