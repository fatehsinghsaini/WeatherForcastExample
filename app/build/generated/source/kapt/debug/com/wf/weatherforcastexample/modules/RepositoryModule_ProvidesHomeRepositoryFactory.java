// Generated by Dagger (https://dagger.dev).
package com.wf.weatherforcastexample.modules;

import com.wf.weatherforcastexample.ui.home.data.LocationProvider;
import com.wf.weatherforcastexample.ui.home.repo.HomeRepository;
import com.wf.weatherforcastexample.ui.home.repo.HomeRepositoryImp;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidesHomeRepositoryFactory implements Factory<HomeRepository> {
  private final Provider<HomeRepositoryImp> homeRepositoryImpProvider;

  private final Provider<LocationProvider> locationProvider;

  public RepositoryModule_ProvidesHomeRepositoryFactory(
      Provider<HomeRepositoryImp> homeRepositoryImpProvider,
      Provider<LocationProvider> locationProvider) {
    this.homeRepositoryImpProvider = homeRepositoryImpProvider;
    this.locationProvider = locationProvider;
  }

  @Override
  public HomeRepository get() {
    return providesHomeRepository(homeRepositoryImpProvider.get(), locationProvider.get());
  }

  public static RepositoryModule_ProvidesHomeRepositoryFactory create(
      Provider<HomeRepositoryImp> homeRepositoryImpProvider,
      Provider<LocationProvider> locationProvider) {
    return new RepositoryModule_ProvidesHomeRepositoryFactory(homeRepositoryImpProvider, locationProvider);
  }

  public static HomeRepository providesHomeRepository(HomeRepositoryImp homeRepositoryImp,
      LocationProvider locationProvider) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.providesHomeRepository(homeRepositoryImp, locationProvider));
  }
}
