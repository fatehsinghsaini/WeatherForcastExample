// Generated by Dagger (https://dagger.dev).
package com.wf.weatherforcastexample.modules;

import com.google.gson.Gson;
import com.wf.weatherforcastexample.domain.api.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideHomeServicesFactory implements Factory<ApiService> {
  private final Provider<Gson> gsonProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkModule_ProvideHomeServicesFactory(Provider<Gson> gsonProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.gsonProvider = gsonProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public ApiService get() {
    return provideHomeServices(gsonProvider.get(), okHttpClientProvider.get());
  }

  public static NetworkModule_ProvideHomeServicesFactory create(Provider<Gson> gsonProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkModule_ProvideHomeServicesFactory(gsonProvider, okHttpClientProvider);
  }

  public static ApiService provideHomeServices(Gson gson, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideHomeServices(gson, okHttpClient));
  }
}
